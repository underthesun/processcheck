/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import components.DraggableButton;
import components.ProcessConfDialog;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import processcheck.Process;

/**
 *
 * @author shuai
 */
public class ProcessPanel extends javax.swing.JPanel {

    private ArrayList<Process> processes;
    private ProcessConfDialog confDialog;
    Point[] points1;
    Point[] points2;

    /**
     * Creates new form ProcessPanel
     */
    public ProcessPanel() {
        initComponents();
        processes = new ArrayList<Process>();
        confDialog = new ProcessConfDialog((Frame) getParent(), true);
        addRoot();
        setLayout(null);
    }

    public void addRoot() {
        Point p = new Point(5, Toolkit.getDefaultToolkit().getScreenSize().height / 2);
        Process root = new Process("root", p, false, null, this);
        addProcess(root);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (Process p : processes) {
            points1 = p.getPoints();
            ArrayList<Process> postProcess = p.getPostProcess();
            if (!postProcess.isEmpty()) {
                for (Process pp : postProcess) {
                    points2 = pp.getPoints();
                    if (points1[1] != null && points2[0] != null) {
                        Graphics2D g2d = (Graphics2D) g;
                        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                        Line2D line2d = new Line2D.Double(points1[1], points2[0]);
                        g2d.draw(line2d);
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAutoscrolls(true);
        setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 273, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public ArrayList<Process> getProcesses() {
        return processes;
    }

    public void setProcesses(ArrayList<Process> processes) {
        this.processes = processes;
    }
    
    public void addProcess(Process p) {
        add(p);
        processes.add(p);
        int width = getPreferredSize().width;
        int height = getPreferredSize().height;
        int pw = p.getLocation().x + p.getSize().width;
        int ph = p.getLocation().y + p.getSize().height;
        if (pw > width) {
            width = pw;
        }
        if (ph > height) {
            height = ph;
        }
        setPreferredSize(new Dimension(width, height));
        revalidate();
    }

    public ProcessConfDialog getConfDialog() {
        return confDialog;
    }

    public void setConfDialog(ProcessConfDialog confDialog) {
        this.confDialog = confDialog;
    }
    
    public void reset(){
        removeAll();
        processes.clear();
        addRoot();
        revalidate();
        repaint();
    }
    
    public boolean isAllMarked(){
        boolean flag = true;
        for(Process p: processes){
            if(p.isIsAotom() && !p.isNumbered()){
                flag = false;
                p.setBackground(Color.red);
                repaint();
            }
        }
        return flag;
    }
    
}
