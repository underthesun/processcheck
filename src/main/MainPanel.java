/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Point;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import processcheck.Node;
import processcheck.NodeProcess;
import processcheck.Process;
import sim.Simulation;

/**
 *
 * @author shuai
 */
public class MainPanel extends javax.swing.JPanel {

    private boolean isProcessPanel;
    private NodePanel nodePanel;

    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        isProcessPanel = true;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        processPanel = new main.ProcessPanel();

        setPreferredSize(new java.awt.Dimension(0, 0));
        setLayout(new java.awt.BorderLayout(0, 5));

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));
        jPanel1.add(jLabel1);
        jPanel1.add(jLabel2);

        btnOK.setText("确定");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        jPanel1.add(btnOK);
        jPanel1.add(jLabel3);
        jPanel1.add(jLabel4);

        btnCancel.setText("取消");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel);
        jPanel1.add(jLabel5);
        jPanel1.add(jLabel6);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setViewportView(processPanel);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        if (isProcessPanel) {
            processPanel.reset();
        } else {
            nodePanel.reset();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        if (isProcessPanel) {
            if (!processPanel.isAllMarked()) {
                JOptionPane.showOptionDialog(this, "请给所有原子过程排序", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            } else {
                addNodePanel();
                isProcessPanel = false;
            }
        } else {
            if (!nodePanel.isAllHaveNodes()) {
                JOptionPane.showOptionDialog(this, "每个过程至少有一个进程", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            } else if (!nodePanel.isAllAssociated()) {
                JOptionPane.showOptionDialog(this, "进程缺少必要关联", "提醒", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{"确定"}, "确定");
            } else {
                disableBtns();
                Simulation sim = new Simulation();
                sim.setNodeProcess(nodePanel.getNodeProcess());
                sim.init();
                sim.start();
                enableBtns();
            }
        }
    }//GEN-LAST:event_btnOKActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private main.ProcessPanel processPanel;
    // End of variables declaration//GEN-END:variables

    public boolean isIsProcessPanel() {
        return isProcessPanel;
    }

    public void setIsProcessPanel(boolean isProcessPanel) {
        this.isProcessPanel = isProcessPanel;
    }

    public void addNodePanel() {
        nodePanel = new NodePanel();
        ArrayList<Process> aotomProcess = new ArrayList<Process>();
        for (Process p : processPanel.getProcesses()) {
            if (p.isIsAotom()) {
                aotomProcess.add(p);
            }
        }
        int len = aotomProcess.size();
        for (int i = 0; i < len; i++) {
            Process tempi = aotomProcess.get(0);
            for (int j = 0; j < aotomProcess.size(); j++) {
                Process tempj = aotomProcess.get(j);
                if (tempi.getSerial() > tempj.getSerial()) {
                    tempi = tempj;
                }
            }
            NodeProcess np = null;
            if (i == 0) {
                np = new NodeProcess(tempi.getText(), new Point(100, 100), i, nodePanel);
            } else {
                np = new NodeProcess(tempi.getText(), new Point(200 * i + 100, 100), i, nodePanel);
            }
            nodePanel.addNodeProcess(np);
            aotomProcess.remove(tempi);
            remove(processPanel);
//            add(nodePanel, BorderLayout.CENTER);
            jScrollPane1.setViewportView(nodePanel);
            revalidate();
            repaint();
        }
    }

    public void disableBtns() {
        this.btnOK.setEnabled(false);
        this.btnCancel.setEnabled(false);
    }

    public void enableBtns() {
        this.btnOK.setEnabled(true);
        this.btnCancel.setEnabled(true);
    }
}
